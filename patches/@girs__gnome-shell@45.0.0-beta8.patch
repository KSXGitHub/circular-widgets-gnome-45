diff --git a/dist/ui/layout.d.ts b/dist/ui/layout.d.ts
index ae28b8266972ae76498cb0fa795ca65e38fc49cb..ad38723fc7f0294e014f9df2d8b4672e425b8bb1 100644
--- a/dist/ui/layout.d.ts
+++ b/dist/ui/layout.d.ts
@@ -5,6 +5,7 @@ import type Gio from '@girs/gio-2.0';
 import type Clutter from '@girs/clutter-13';
 import type St from '@girs/st-13';
 import type Meta from '@girs/meta-13';
+import type Mtk from '@girs/mtk-13';
 
 import { EventEmitter } from '../misc/signals.js';
 
@@ -147,12 +148,12 @@ export class LayoutManager extends GObject.Object {
      * function before you show the menu to ensure it is at the right
      * position and has the right size.
      * @param x
-     * @param y 
-     * @param width 
-     * @param height 
+     * @param y
+     * @param width
+     * @param height
      */
     public setDummyCursorGeometry(x: number, y: number, width: number, height: number): void;
-    
+
     /**
      * Adds `actor` to the chrome, and (unless `affectsInputRegion` in
      * `params` is `false`) extends the input region to include it.
@@ -180,15 +181,15 @@ export class LayoutManager extends GObject.Object {
      * @param params Additional params
      */
     public addTopChrome(actor: Clutter.Actor, params?: { affectsStruts?: boolean; affectsInputRegion?: boolean; trackFullscreen?: boolean; }): void;
-    
+
     /**
      * Tells the chrome to track `actor`. This can be used to extend the
      * struts or input region to cover specific children.
-     * 
+     *
      * `params` can have any of the same values as in {@link addChrome()},
      * though some possibilities don't make sense. By default, `actor` has
      * the same params as its chrome ancestor.
-     * 
+     *
      * @param actor a descendant of the chrome to begin tracking
      * @param params parameters describing how to track `actor`
      */
@@ -207,12 +208,12 @@ export class LayoutManager extends GObject.Object {
      */
     public removeChrome(actor: Clutter.Actor): void;
 
-    public getWorkAreaForMonitor(monitorIndex: number) : void
+    public getWorkAreaForMonitor(monitorIndex: number) : Mtk.Rectangle
 
     /**
      * This call guarantees that we return some monitor to simplify usage of it
      * In practice all tracked actors should be visible on some monitor anyway
-     * @param actor 
+     * @param actor
      */
     public findIndexForActor(actor: Clutter.Actor): number
 
@@ -297,4 +298,3 @@ declare class PressureBarrier extends EventEmitter {
     protected _trigger(): void;
     protected _onBarrierHit(barrier: Meta.Barrier, event: any): void;
 }
-
diff --git a/src/ui/layout.d.ts b/src/ui/layout.d.ts
index ae28b8266972ae76498cb0fa795ca65e38fc49cb..ad38723fc7f0294e014f9df2d8b4672e425b8bb1 100644
--- a/src/ui/layout.d.ts
+++ b/src/ui/layout.d.ts
@@ -5,6 +5,7 @@ import type Gio from '@girs/gio-2.0';
 import type Clutter from '@girs/clutter-13';
 import type St from '@girs/st-13';
 import type Meta from '@girs/meta-13';
+import type Mtk from '@girs/mtk-13';
 
 import { EventEmitter } from '../misc/signals.js';
 
@@ -147,12 +148,12 @@ export class LayoutManager extends GObject.Object {
      * function before you show the menu to ensure it is at the right
      * position and has the right size.
      * @param x
-     * @param y 
-     * @param width 
-     * @param height 
+     * @param y
+     * @param width
+     * @param height
      */
     public setDummyCursorGeometry(x: number, y: number, width: number, height: number): void;
-    
+
     /**
      * Adds `actor` to the chrome, and (unless `affectsInputRegion` in
      * `params` is `false`) extends the input region to include it.
@@ -180,15 +181,15 @@ export class LayoutManager extends GObject.Object {
      * @param params Additional params
      */
     public addTopChrome(actor: Clutter.Actor, params?: { affectsStruts?: boolean; affectsInputRegion?: boolean; trackFullscreen?: boolean; }): void;
-    
+
     /**
      * Tells the chrome to track `actor`. This can be used to extend the
      * struts or input region to cover specific children.
-     * 
+     *
      * `params` can have any of the same values as in {@link addChrome()},
      * though some possibilities don't make sense. By default, `actor` has
      * the same params as its chrome ancestor.
-     * 
+     *
      * @param actor a descendant of the chrome to begin tracking
      * @param params parameters describing how to track `actor`
      */
@@ -207,12 +208,12 @@ export class LayoutManager extends GObject.Object {
      */
     public removeChrome(actor: Clutter.Actor): void;
 
-    public getWorkAreaForMonitor(monitorIndex: number) : void
+    public getWorkAreaForMonitor(monitorIndex: number) : Mtk.Rectangle
 
     /**
      * This call guarantees that we return some monitor to simplify usage of it
      * In practice all tracked actors should be visible on some monitor anyway
-     * @param actor 
+     * @param actor
      */
     public findIndexForActor(actor: Clutter.Actor): number
 
@@ -297,4 +298,3 @@ declare class PressureBarrier extends EventEmitter {
     protected _trigger(): void;
     protected _onBarrierHit(barrier: Meta.Barrier, event: any): void;
 }
-
