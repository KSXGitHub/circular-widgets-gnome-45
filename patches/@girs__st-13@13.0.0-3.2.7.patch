diff --git a/st-13.d.ts b/st-13.d.ts
index 73d5dc41635b85a05f7840f1d321a168b036f02c..eafb5e9e29d97da98514dd3ec6aa049bb90748af 100644
--- a/st-13.d.ts
+++ b/st-13.d.ts
@@ -207,7 +207,7 @@ enum TextureCachePolicy {
 }
 /**
  * A mask representing which mouse buttons an #StButton responds to.
- * @bitfield 
+ * @bitfield
  */
 enum ButtonMask {
     /**
@@ -225,7 +225,7 @@ enum ButtonMask {
 }
 /**
  * Used to specify options for st_icon_theme_lookup_icon()
- * @bitfield 
+ * @bitfield
  */
 enum IconLookupFlags {
     /**
@@ -274,10 +274,10 @@ enum IconLookupFlags {
 }
 /**
  * Flags used to determine the decoration of text.
- * 
+ *
  * Not that neither %ST_TEXT_DECORATION_OVERLINE or %ST_TEXT_DECORATION_BLINK
  * are implemented, currently.
- * @bitfield 
+ * @bitfield
  */
 enum TextDecoration {
     UNDERLINE,
@@ -305,7 +305,7 @@ function describe_actor(actor: Clutter.Actor): string | null
 function icon_theme_error_quark(): GLib.Quark
 /**
  * Callback function called when text is retrieved from the clipboard.
- * @callback 
+ * @callback
  * @param clipboard A #StClipboard
  * @param text text from the clipboard
  */
@@ -314,7 +314,7 @@ interface ClipboardCallbackFunc {
 }
 /**
  * Callback function called when content is retrieved from the clipboard.
- * @callback 
+ * @callback
  * @param clipboard A #StClipboard
  * @param bytes content from the clipboard
  */
@@ -334,13 +334,13 @@ module Scrollable {
 
         /**
          * The horizontal #StAdjustment used by the #StScrollable.
-         * 
+         *
          * Implementations should override this property to provide read-write
          * access to the #StAdjustment.
-         * 
+         *
          * JavaScript code may override this as demonstrated below:
-         * 
-         * 
+         *
+         *
          * ```<!-- language="JavaScript" -->
          * export const MyScrollable = GObject.registerClass({
          *     Properties: {
@@ -350,29 +350,29 @@ module Scrollable {
          *         )
          *     }
          * }, class MyScrollable extends St.Scrollable {
-         * 
+         *
          *     get hadjustment() {
          *         return this._hadjustment || null;
          *     }
-         * 
+         *
          *     set hadjustment(adjustment) {
          *         if (this.hadjustment === adjustment)
          *             return;
-         * 
+         *
          *         this._hadjustment = adjustment;
          *         this.notify('hadjustment');
          *     }
          * });
          * ```
-         * 
+         *
          */
         hadjustment?: Adjustment | null
         /**
          * The vertical #StAdjustment used by the #StScrollable.
-         * 
+         *
          * Implementations should override this property to provide read-write
          * access to the #StAdjustment.
-         * 
+         *
          * See #StScrollable:hadjustment for an example of how to override this
          * property in JavaScript code.
          */
@@ -387,13 +387,13 @@ interface Scrollable {
 
     /**
      * The horizontal #StAdjustment used by the #StScrollable.
-     * 
+     *
      * Implementations should override this property to provide read-write
      * access to the #StAdjustment.
-     * 
+     *
      * JavaScript code may override this as demonstrated below:
-     * 
-     * 
+     *
+     *
      * ```<!-- language="JavaScript" -->
      * export const MyScrollable = GObject.registerClass({
      *     Properties: {
@@ -403,29 +403,29 @@ interface Scrollable {
      *         )
      *     }
      * }, class MyScrollable extends St.Scrollable {
-     * 
+     *
      *     get hadjustment() {
      *         return this._hadjustment || null;
      *     }
-     * 
+     *
      *     set hadjustment(adjustment) {
      *         if (this.hadjustment === adjustment)
      *             return;
-     * 
+     *
      *         this._hadjustment = adjustment;
      *         this.notify('hadjustment');
      *     }
      * });
      * ```
-     * 
+     *
      */
     hadjustment: Adjustment
     /**
      * The vertical #StAdjustment used by the #StScrollable.
-     * 
+     *
      * Implementations should override this property to provide read-write
      * access to the #StAdjustment.
-     * 
+     *
      * See #StScrollable:hadjustment for an example of how to override this
      * property in JavaScript code.
      */
@@ -437,7 +437,7 @@ interface Scrollable {
     /**
      * This method should be implemented by classes implementing the #StScrollable
      * interface.
-     * 
+     *
      * JavaScript code should do this by overriding the `vfunc_set_adjustments()`
      * method.
      * @param hadjustment the horizontal #StAdjustment
@@ -451,10 +451,10 @@ interface Scrollable {
     /**
      * This method should be implemented by classes implementing the #StScrollable
      * interface.
-     * 
+     *
      * JavaScript code should do this by overriding the `vfunc_set_adjustments()`
      * method.
-     * @virtual 
+     * @virtual
      * @param hadjustment the horizontal #StAdjustment
      * @param vadjustment the vertical #StAdjustment
      */
@@ -483,7 +483,7 @@ class Scrollable extends GObject.Object {
 
     // Constructors of St-13.St.Scrollable
 
-    constructor(config?: Scrollable.ConstructorProperties) 
+    constructor(config?: Scrollable.ConstructorProperties)
     _init(config?: Scrollable.ConstructorProperties): void
 }
 
@@ -521,7 +521,7 @@ module Adjustment {
         page_increment?: number | null
         /**
          * The page size of the adjustment.
-         * 
+         *
          * Note that the page-size is irrelevant and should be set to zero if the
          * adjustment is used for a simple scalar value.
          */
@@ -532,7 +532,7 @@ module Adjustment {
         step_increment?: number | null
         /**
          * The maximum value of the adjustment.
-         * 
+         *
          * Note that values will be restricted by `upper - page-size` if
          * #StAdjustment:page-size is non-zero.
          */
@@ -547,7 +547,7 @@ module Adjustment {
         pageIncrement?: number | null
         /**
          * The page size of the adjustment.
-         * 
+         *
          * Note that the page-size is irrelevant and should be set to zero if the
          * adjustment is used for a simple scalar value.
          */
@@ -584,14 +584,14 @@ interface Adjustment extends Clutter.Animatable {
     pageIncrement: number
     /**
      * The page size of the adjustment.
-     * 
+     *
      * Note that the page-size is irrelevant and should be set to zero if the
      * adjustment is used for a simple scalar value.
      */
     page_size: number
     /**
      * The page size of the adjustment.
-     * 
+     *
      * Note that the page-size is irrelevant and should be set to zero if the
      * adjustment is used for a simple scalar value.
      */
@@ -606,7 +606,7 @@ interface Adjustment extends Clutter.Animatable {
     stepIncrement: number
     /**
      * The maximum value of the adjustment.
-     * 
+     *
      * Note that values will be restricted by `upper - page-size` if
      * #StAdjustment:page-size is non-zero.
      */
@@ -670,7 +670,7 @@ interface Adjustment extends Clutter.Animatable {
     set_value(value: number): void
     /**
      * Sets all properties of the adjustment at once.
-     * 
+     *
      * Use this function to avoid multiple emissions of the #GObject::notify and
      * #StAdjustment::changed signals. See st_adjustment_set_lower() for an
      * alternative way of compressing multiple emissions of #GObject::notify and
@@ -732,10 +732,10 @@ class Adjustment extends GObject.Object {
 
     // Constructors of St-13.St.Adjustment
 
-    constructor(config?: Adjustment.ConstructorProperties) 
+    constructor(config?: Adjustment.ConstructorProperties)
     /**
      * Creates a new #StAdjustment
-     * @constructor 
+     * @constructor
      * @param actor a #ClutterActor
      * @param value the initial value
      * @param lower the minimum value
@@ -745,10 +745,10 @@ class Adjustment extends GObject.Object {
      * @param page_size the page size
      * @returns a new #StAdjustment
      */
-    constructor(actor: Clutter.Actor | null, value: number, lower: number, upper: number, step_increment: number, page_increment: number, page_size: number) 
+    constructor(actor: Clutter.Actor | null, value: number, lower: number, upper: number, step_increment: number, page_increment: number, page_size: number)
     /**
      * Creates a new #StAdjustment
-     * @constructor 
+     * @constructor
      * @param actor a #ClutterActor
      * @param value the initial value
      * @param lower the minimum value
@@ -800,7 +800,7 @@ interface Bin extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Containe
     get_child(): Clutter.Actor | null
     /**
      * Sets `child` as the child of `bin`.
-     * 
+     *
      * If `bin` already has a child, the previous child is removed.
      * @param child a #ClutterActor, or %NULL
      */
@@ -1066,16 +1066,16 @@ class Bin extends Widget {
 
     // Constructors of St-13.St.Bin
 
-    constructor(config?: Bin.ConstructorProperties) 
+    constructor(config?: Bin.ConstructorProperties)
     /**
      * Creates a new #StBin, a simple container for one child.
-     * @constructor 
+     * @constructor
      * @returns the newly created #StBin actor
      */
-    constructor() 
+    constructor()
     /**
      * Creates a new #StBin, a simple container for one child.
-     * @constructor 
+     * @constructor
      * @returns the newly created #StBin actor
      */
     static new(): Bin
@@ -1084,10 +1084,10 @@ class Bin extends Widget {
 
     /**
      * Creates a new #ClutterActor.
-     * 
+     *
      * A newly created actor has a floating reference, which will be sunk
      * when it is added to another actor.
-     * @constructor 
+     * @constructor
      * @returns the newly created #ClutterActor
      */
     static new(): Clutter.Actor
@@ -1137,10 +1137,10 @@ class BorderImage extends GObject.Object {
 
     // Constructors of St-13.St.BorderImage
 
-    constructor(config?: BorderImage.ConstructorProperties) 
+    constructor(config?: BorderImage.ConstructorProperties)
     /**
      * Creates a new #StBorderImage.
-     * @constructor 
+     * @constructor
      * @param file a #GFile
      * @param border_top the top border
      * @param border_right the right border
@@ -1149,10 +1149,10 @@ class BorderImage extends GObject.Object {
      * @param scale_factor the scale factor
      * @returns a new #StBorderImage.
      */
-    constructor(file: Gio.File, border_top: number, border_right: number, border_bottom: number, border_left: number, scale_factor: number) 
+    constructor(file: Gio.File, border_top: number, border_right: number, border_bottom: number, border_left: number, scale_factor: number)
     /**
      * Creates a new #StBorderImage.
-     * @constructor 
+     * @constructor
      * @param file a #GFile
      * @param border_top the top border
      * @param border_right the right border
@@ -1492,12 +1492,19 @@ interface BoxLayout extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Co
     connect_after(sigName: string, callback: (...args: any[]) => void): number
     emit(sigName: string, ...args: any[]): void
     disconnect(id: number): void
+
+    ease(props: {
+        readonly x?: number
+        readonly y?: number
+        readonly duration?: number
+        readonly mode?: Clutter.AnimationMode
+    }): void
 }
 
 /**
  * The contents of this structure are private and should only be accessed
  * through the public API.
- * @class 
+ * @class
  */
 class BoxLayout extends Viewport {
 
@@ -1508,16 +1515,16 @@ class BoxLayout extends Viewport {
 
     // Constructors of St-13.St.BoxLayout
 
-    constructor(config?: BoxLayout.ConstructorProperties) 
+    constructor(config?: BoxLayout.ConstructorProperties)
     /**
      * Create a new #StBoxLayout.
-     * @constructor 
+     * @constructor
      * @returns a newly allocated #StBoxLayout
      */
-    constructor() 
+    constructor()
     /**
      * Create a new #StBoxLayout.
-     * @constructor 
+     * @constructor
      * @returns a newly allocated #StBoxLayout
      */
     static new(): BoxLayout
@@ -1526,10 +1533,10 @@ class BoxLayout extends Viewport {
 
     /**
      * Creates a new #ClutterActor.
-     * 
+     *
      * A newly created actor has a floating reference, which will be sunk
      * when it is added to another actor.
-     * @constructor 
+     * @constructor
      * @returns the newly created #ClutterActor
      */
     static new(): Clutter.Actor
@@ -1561,7 +1568,7 @@ module Button {
         /**
          * If #StButton:toggle-mode is %TRUE, indicates if the #StButton is toggled
          * "on" or "off".
-         * 
+         *
          * When the value is %TRUE, the #StButton will have the `checked` CSS
          * pseudo-class set.
          */
@@ -1609,7 +1616,7 @@ interface Button extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
     /**
      * If #StButton:toggle-mode is %TRUE, indicates if the #StButton is toggled
      * "on" or "off".
-     * 
+     *
      * When the value is %TRUE, the #StButton will have the `checked` CSS
      * pseudo-class set.
      */
@@ -1651,7 +1658,7 @@ interface Button extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * will ungrab it, and reset the #StButton:pressed state.  The effect is
      * similar to if the user had released the mouse button, but without
      * emitting the #StButton::clicked signal.
-     * 
+     *
      * This function is useful if for example you want to do something
      * after the user is holding the mouse button for a given period of
      * time, breaking the grab.
@@ -1698,7 +1705,7 @@ interface Button extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
     set_checked(checked: boolean): void
     /**
      * Adds an `StIcon` with the given icon name as a child.
-     * 
+     *
      * If `button` already contains a child actor, that child will
      * be removed and replaced with the icon.
      * @param icon_name an icon name
@@ -2005,16 +2012,16 @@ class Button extends Bin {
 
     // Constructors of St-13.St.Button
 
-    constructor(config?: Button.ConstructorProperties) 
+    constructor(config?: Button.ConstructorProperties)
     /**
      * Create a new button
-     * @constructor 
+     * @constructor
      * @returns a new #StButton
      */
-    constructor() 
+    constructor()
     /**
      * Create a new button
-     * @constructor 
+     * @constructor
      * @returns a new #StButton
      */
     static new(): Button
@@ -2023,22 +2030,22 @@ class Button extends Bin {
 
     /**
      * Creates a new #StBin, a simple container for one child.
-     * @constructor 
+     * @constructor
      * @returns the newly created #StBin actor
      */
     static new(): Bin
     /**
      * Creates a new #ClutterActor.
-     * 
+     *
      * A newly created actor has a floating reference, which will be sunk
      * when it is added to another actor.
-     * @constructor 
+     * @constructor
      * @returns the newly created #ClutterActor
      */
     static new(): Clutter.Actor
     /**
      * Create a new #StButton with the specified label
-     * @constructor 
+     * @constructor
      * @param text text to set the label to
      * @returns a new #StButton
      */
@@ -2069,7 +2076,7 @@ interface Clipboard {
     get_content(type: ClipboardType, mimetype: string, callback: ClipboardContentCallbackFunc): void
     /**
      * Gets a list of the mimetypes supported by the default #StClipboard.
-     * @param type 
+     * @param type
      * @returns the supported mimetypes
      */
     get_mimetypes(type: ClipboardType): string[]
@@ -2082,7 +2089,7 @@ interface Clipboard {
     get_text(type: ClipboardType, callback: ClipboardCallbackFunc): void
     /**
      * Sets the clipboard content to `bytes`.
-     * 
+     *
      * `mimetype` is a semi-colon separated list of mime-type strings.
      * @param type The type of clipboard that you want to set
      * @param mimetype content mimetype
@@ -2107,7 +2114,7 @@ interface Clipboard {
 /**
  * The contents of this structure is private and should only be accessed using
  * the provided API.
- * @class 
+ * @class
  */
 class Clipboard extends GObject.Object {
 
@@ -2118,7 +2125,7 @@ class Clipboard extends GObject.Object {
 
     // Constructors of St-13.St.Clipboard
 
-    constructor(config?: Clipboard.ConstructorProperties) 
+    constructor(config?: Clipboard.ConstructorProperties)
     _init(config?: Clipboard.ConstructorProperties): void
     /**
      * Get the global #StClipboard object that represents the clipboard.
@@ -2158,24 +2165,24 @@ interface DrawingArea extends Atk.ImplementorIface, Clutter.Animatable, Clutter.
      * Gets the Cairo context to paint to. This function must only be called
      * from a signal handler or virtual function for the #StDrawingArea::repaint
      * signal.
-     * 
+     *
      * JavaScript code must call the special dispose function before returning from
      * the signal handler or virtual function to avoid leaking memory:
-     * 
-     * 
+     *
+     *
      * ```<!-- language="JavaScript" -->
      * function onRepaint(area) {
      *     let cr = area.get_context();
-     * 
+     *
      *     // Draw to the context
-     * 
+     *
      *     cr.$dispose();
      * }
-     * 
+     *
      * let area = new St.DrawingArea();
      * area.connect('repaint', onRepaint);
      * ```
-     * 
+     *
      * @returns the Cairo context for the paint operation
      */
     get_context(): cairo.Context
@@ -2461,7 +2468,7 @@ class DrawingArea extends Widget {
 
     // Constructors of St-13.St.DrawingArea
 
-    constructor(config?: DrawingArea.ConstructorProperties) 
+    constructor(config?: DrawingArea.ConstructorProperties)
     _init(config?: DrawingArea.ConstructorProperties): void
 }
 
@@ -2650,7 +2657,7 @@ interface Entry extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Contai
     /**
      * Gets the text that is displayed when the entry is empty and unfocused or
      * %NULL if the #StEntry:hint-actor was set to an actor that is not a #StLabel.
-     * 
+     *
      * Unlike st_entry_get_text() this function may return %NULL if
      * #StEntry:hint-actor is not a #StLabel.
      * @returns the current value of the hint property
@@ -3019,17 +3026,17 @@ class Entry extends Widget {
 
     // Constructors of St-13.St.Entry
 
-    constructor(config?: Entry.ConstructorProperties) 
+    constructor(config?: Entry.ConstructorProperties)
     /**
      * Create a new #StEntry with the specified text.
-     * @constructor 
+     * @constructor
      * @param text text to set the entry to
      * @returns a new #StEntry
      */
-    constructor(text: string | null) 
+    constructor(text: string | null)
     /**
      * Create a new #StEntry with the specified text.
-     * @constructor 
+     * @constructor
      * @param text text to set the entry to
      * @returns a new #StEntry
      */
@@ -3039,10 +3046,10 @@ class Entry extends Widget {
 
     /**
      * Creates a new #ClutterActor.
-     * 
+     *
      * A newly created actor has a floating reference, which will be sunk
      * when it is added to another actor.
-     * @constructor 
+     * @constructor
      * @returns the newly created #ClutterActor
      */
     static new(): Clutter.Actor
@@ -3101,7 +3108,7 @@ interface FocusManager {
 
 /**
  * The #StFocusManager struct contains only private data
- * @class 
+ * @class
  */
 class FocusManager extends GObject.Object {
 
@@ -3112,7 +3119,7 @@ class FocusManager extends GObject.Object {
 
     // Constructors of St-13.St.FocusManager
 
-    constructor(config?: FocusManager.ConstructorProperties) 
+    constructor(config?: FocusManager.ConstructorProperties)
     _init(config?: FocusManager.ConstructorProperties): void
     /**
      * Gets the #StFocusManager for `stage,` creating it if necessary.
@@ -3199,7 +3206,7 @@ interface GenericAccessible extends Atk.Action, Atk.Component, Atk.Value {
      * "click", "press", "release", "drag", "drop", "popup", etc.
      * The "popup" action should be used to pop up a context menu for the
      * object, if one exists.
-     * 
+     *
      * For technical reasons, some toolkits cannot guarantee that the
      * reported action is actually 'bound' to a nontrivial user event;
      * i.e. the result of some actions via atk_action_do_action() may be
@@ -3230,14 +3237,14 @@ interface GenericAccessible extends Atk.Action, Atk.Component, Atk.Value {
     set_description(description: string): void
     /**
      * Returns a description of the specified action of the object.
-     * @virtual 
+     * @virtual
      * @param i the action index corresponding to the action to be performed
      * @returns a description string, or %NULL if @action does not implement this interface.
      */
     vfunc_get_description(i: number): string | null
     /**
      * Gets the accessible description of the accessible.
-     * @virtual 
+     * @virtual
      * @returns a character string representing the accessible description of the accessible.
      */
     vfunc_get_description(): string
@@ -3251,25 +3258,25 @@ interface GenericAccessible extends Atk.Action, Atk.Component, Atk.Value {
      * "click", "press", "release", "drag", "drop", "popup", etc.
      * The "popup" action should be used to pop up a context menu for the
      * object, if one exists.
-     * 
+     *
      * For technical reasons, some toolkits cannot guarantee that the
      * reported action is actually 'bound' to a nontrivial user event;
      * i.e. the result of some actions via atk_action_do_action() may be
      * NIL.
-     * @virtual 
+     * @virtual
      * @param i the action index corresponding to the action to be performed
      * @returns a name string, or %NULL if @action does not implement this interface.
      */
     vfunc_get_name(i: number): string | null
     /**
      * Gets the accessible name of the accessible.
-     * @virtual 
+     * @virtual
      * @returns a character string representing the accessible name of the object.
      */
     vfunc_get_name(): string
     /**
      * Sets a description of the specified action of the object.
-     * @virtual 
+     * @virtual
      * @param i the action index corresponding to the action to be performed
      * @param desc the description to be assigned to this action
      * @returns a gboolean representing if the description was successfully set;
@@ -3280,7 +3287,7 @@ interface GenericAccessible extends Atk.Action, Atk.Component, Atk.Value {
      * the description to NULL. This is reserved for the initial value. In
      * this aspect NULL is similar to ATK_ROLE_UNKNOWN. If you want to set
      * the name to a empty value you can use "".
-     * @virtual 
+     * @virtual
      * @param description a character string to be set as the accessible description
      */
     vfunc_set_description(description: string): void
@@ -3365,12 +3372,12 @@ class GenericAccessible extends WidgetAccessible {
 
     // Constructors of St-13.St.GenericAccessible
 
-    constructor(config?: GenericAccessible.ConstructorProperties) 
+    constructor(config?: GenericAccessible.ConstructorProperties)
     /**
      * Create a new #StGenericAccessible for `actor`.
-     * 
+     *
      * This is useful only for custom widgets that need a proxy for #AtkObject.
-     * @constructor 
+     * @constructor
      * @param actor a #Clutter Actor
      * @returns a new #AtkObject
      */
@@ -3806,7 +3813,7 @@ interface Icon extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Contain
 /**
  * The contents of this structure are private and should only be accessed
  * through the public API.
- * @class 
+ * @class
  */
 class Icon extends Widget {
 
@@ -3817,16 +3824,16 @@ class Icon extends Widget {
 
     // Constructors of St-13.St.Icon
 
-    constructor(config?: Icon.ConstructorProperties) 
+    constructor(config?: Icon.ConstructorProperties)
     /**
      * Create a newly allocated #StIcon.
-     * @constructor 
+     * @constructor
      * @returns A newly allocated #StIcon
      */
-    constructor() 
+    constructor()
     /**
      * Create a newly allocated #StIcon.
-     * @constructor 
+     * @constructor
      * @returns A newly allocated #StIcon
      */
     static new(): Icon
@@ -3864,7 +3871,7 @@ interface IconInfo {
      * to a larger icon. These icons will be given
      * the same base size as the larger icons to which
      * they are attached.
-     * 
+     *
      * Note that for scaled icons the base size does
      * not include the base scale.
      * @returns the base size, or 0, if no base     size is known for the icon.
@@ -3900,7 +3907,7 @@ interface IconInfo {
     /**
      * Asynchronously load, render and scale an icon previously looked up
      * from the icon theme using st_icon_theme_lookup_icon().
-     * 
+     *
      * For more details, see st_icon_info_load_icon() which is the synchronous
      * version of this call.
      * @param cancellable optional #GCancellable object, %NULL to ignore
@@ -3912,10 +3919,10 @@ interface IconInfo {
 
     /**
      * Promisified version of {@link load_icon_async}
-     * 
+     *
      * Asynchronously load, render and scale an icon previously looked up
      * from the icon theme using st_icon_theme_lookup_icon().
-     * 
+     *
      * For more details, see st_icon_info_load_icon() which is the synchronous
      * version of this call.
      * @param cancellable optional #GCancellable object, %NULL to ignore
@@ -3932,17 +3939,17 @@ interface IconInfo {
      * Loads an icon, modifying it to match the system colours for the foreground,
      * success, warning and error colors provided. If the icon is not a symbolic
      * one, the function will return the result from st_icon_info_load_icon().
-     * 
+     *
      * This allows loading symbolic icons that will match the system theme.
-     * 
+     *
      * Unless you are implementing a widget, you will want to use
      * g_themed_icon_new_with_default_fallbacks() to load the icon.
-     * 
+     *
      * As implementation details, the icon loaded needs to be of SVG type,
      * contain the “symbolic” term as the last component of the icon name,
      * and use the “fg”, “success”, “warning” and “error” CSS styles in the
      * SVG file itself.
-     * 
+     *
      * See the [Symbolic Icons Specification](http://www.freedesktop.org/wiki/SymbolicIcons)
      * for more information about symbolic icons.
      * @param colors a #StIconColors representing the foreground, warning and error colors
@@ -3952,7 +3959,7 @@ interface IconInfo {
     /**
      * Asynchronously load, render and scale a symbolic icon previously looked up
      * from the icon theme using st_icon_theme_lookup_icon().
-     * 
+     *
      * For more details, see st_icon_info_load_symbolic() which is the synchronous
      * version of this call.
      * @param colors an #StIconColors representing the foreground, error and     success colors of the icon
@@ -3965,10 +3972,10 @@ interface IconInfo {
 
     /**
      * Promisified version of {@link load_symbolic_async}
-     * 
+     *
      * Asynchronously load, render and scale a symbolic icon previously looked up
      * from the icon theme using st_icon_theme_lookup_icon().
-     * 
+     *
      * For more details, see st_icon_info_load_symbolic() which is the synchronous
      * version of this call.
      * @param colors an #StIconColors representing the foreground, error and     success colors of the icon
@@ -4000,10 +4007,10 @@ class IconInfo extends GObject.Object {
 
     // Constructors of St-13.St.IconInfo
 
-    constructor(config?: IconInfo.ConstructorProperties) 
+    constructor(config?: IconInfo.ConstructorProperties)
     /**
      * Creates a #StIconInfo for a #GdkPixbuf.
-     * @constructor 
+     * @constructor
      * @param icon_theme a #StIconTheme
      * @param pixbuf the pixbuf to wrap in a #StIconInfo
      * @returns a #StIconInfo
@@ -4038,10 +4045,10 @@ interface IconTheme {
     /**
      * Adds a resource path that will be looked at when looking
      * for icons, similar to search paths.
-     * 
+     *
      * This function should be used to make application-specific icons
      * available as part of the icon theme.
-     * 
+     *
      * The resources are considered as part of the hicolor icon theme
      * and must be located in subdirectories that are defined in the
      * hicolor icon theme, such as ``path/`16x16/actions/run.png`.
@@ -4062,7 +4069,7 @@ interface IconTheme {
      * can then be rendered into a pixbuf using
      * st_icon_info_load_icon(). (st_icon_theme_load_icon()
      * combines these two steps if all you need is the pixbuf.)
-     * 
+     *
      * If `icon_names` contains more than one name, this function
      * tries them all in the given order before falling back to
      * inherited icon themes.
@@ -4078,7 +4085,7 @@ interface IconTheme {
      * icon. The icon can then be rendered into a pixbuf using
      * st_icon_info_load_icon(). (st_icon_theme_load_icon()
      * combines these two steps if all you need is the pixbuf.)
-     * 
+     *
      * If `icon_names` contains more than one name, this function
      * tries them all in the given order before falling back to
      * inherited icon themes.
@@ -4135,7 +4142,7 @@ interface IconTheme {
      * and renders it into a pixbuf. This is a convenience function;
      * if more details about the icon are needed, use
      * st_icon_theme_lookup_icon() followed by st_icon_info_load_icon().
-     * 
+     *
      * Note that you probably want to listen for icon theme changes and
      * update the icon. This is usually done by connecting to the
      * GtkWidget::style-set signal. If for some reason you do not want to
@@ -4155,7 +4162,7 @@ interface IconTheme {
      * convenience function; if more details about the icon are needed,
      * use st_icon_theme_lookup_icon() followed by
      * st_icon_info_load_icon().
-     * 
+     *
      * Note that you probably want to listen for icon theme changes and
      * update the icon. This is usually done by connecting to the
      * GtkWidget::style-set signal. If for some reason you do not want to
@@ -4174,7 +4181,7 @@ interface IconTheme {
      * Looks up an icon and returns a #StIconInfo containing information
      * such as the filename of the icon. The icon can then be rendered
      * into a pixbuf using st_icon_info_load_icon().
-     * 
+     *
      * When rendering on displays with high pixel densities you should not
      * use a `size` multiplied by the scaling factor returned by functions
      * like gdk_window_get_scale_factor(). Instead, you should use
@@ -4203,7 +4210,7 @@ interface IconTheme {
      * can then be rendered into a pixbuf using
      * st_icon_info_load_icon(). (st_icon_theme_load_icon()
      * combines these two steps if all you need is the pixbuf.)
-     * 
+     *
      * When rendering on displays with high pixel densities you should not
      * use a `size` multiplied by the scaling factor returned by functions
      * like gdk_window_get_scale_factor(). Instead, you should use
@@ -4248,7 +4255,7 @@ interface IconTheme {
      * as the icon theme containing an index.theme file. (Themes from
      * multiple of the path elements are combined to allow themes to be
      * extended by adding icons in the user’s home directory.)
-     * 
+     *
      * In addition if an icon found isn’t found either in the current
      * icon theme or the default icon theme, and an image file with
      * the right name is found directly in one of the elements of
@@ -4284,12 +4291,12 @@ interface IconTheme {
  * There is a fallback icon theme, named `hicolor`, where applications
  * should install their icons, but additional icon themes can be installed
  * as operating system vendors and users choose.
- * 
+ *
  * In many cases, named themes are used indirectly, via #StIcon,
  * rather than directly, but looking up icons directly is also simple.
  * The #StIconTheme object acts as a database of all the icons in the
  * current theme.
- * @class 
+ * @class
  */
 class IconTheme extends GObject.Object {
 
@@ -4300,18 +4307,18 @@ class IconTheme extends GObject.Object {
 
     // Constructors of St-13.St.IconTheme
 
-    constructor(config?: IconTheme.ConstructorProperties) 
+    constructor(config?: IconTheme.ConstructorProperties)
     /**
      * Creates a new icon theme object. Icon theme objects are used
      * to lookup up an icon by name in a particular icon theme.
-     * @constructor 
+     * @constructor
      * @returns the newly created #StIconTheme object.
      */
-    constructor() 
+    constructor()
     /**
      * Creates a new icon theme object. Icon theme objects are used
      * to lookup up an icon by name in a particular icon theme.
-     * @constructor 
+     * @constructor
      * @returns the newly created #StIconTheme object.
      */
     static new(): IconTheme
@@ -4347,23 +4354,23 @@ interface ImageContent extends Clutter.Content, Gio.Icon, Gio.LoadableIcon {
 
     /**
      * Sets the image data to be displayed by `image`.
-     * 
+     *
      * If the image data was successfully loaded, the `image` will be invalidated.
-     * 
+     *
      * In case of error, the `error` value will be set, and this function will
      * return %FALSE.
-     * 
+     *
      * The image data is copied in texture memory.
-     * 
+     *
      * The image data is expected to be a linear array of RGBA or RGB pixel data;
      * how to retrieve that data is left to platform specific image loaders. For
      * instance, if you use the GdkPixbuf library:
-     * 
+     *
      * ```c
      *   ClutterContent *image = clutter_image_new ();
-     * 
+     *
      *   GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file (filename, NULL);
-     * 
+     *
      *   clutter_image_set_data (CLUTTER_IMAGE (image),
      *                           gdk_pixbuf_get_pixels (pixbuf),
      *                           gdk_pixbuf_get_has_alpha (pixbuf)
@@ -4373,7 +4380,7 @@ interface ImageContent extends Clutter.Content, Gio.Icon, Gio.LoadableIcon {
      *                           gdk_pixbuf_get_height (pixbuf),
      *                           gdk_pixbuf_get_rowstride (pixbuf),
      *                           &error);
-     * 
+     *
      *   g_object_unref (pixbuf);
      * ```
      * @param data the image data, as an array of bytes
@@ -4390,10 +4397,10 @@ interface ImageContent extends Clutter.Content, Gio.Icon, Gio.LoadableIcon {
     /**
      * Each object carries around a table of associations from
      * strings to pointers.  This function lets you set an association.
-     * 
+     *
      * If the object already had an association with that name,
      * the old association will be destroyed.
-     * 
+     *
      * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
      * This means a copy of `key` is kept permanently (even after `object` has been
      * finalized) — so it is recommended to only use a small, bounded set of values
@@ -4405,10 +4412,10 @@ interface ImageContent extends Clutter.Content, Gio.Icon, Gio.LoadableIcon {
     /**
      * Each object carries around a table of associations from
      * strings to pointers.  This function lets you set an association.
-     * 
+     *
      * If the object already had an association with that name,
      * the old association will be destroyed.
-     * 
+     *
      * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
      * This means a copy of `key` is kept permanently (even after `object` has been
      * finalized) — so it is recommended to only use a small, bounded set of values
@@ -4441,11 +4448,11 @@ class ImageContent extends Clutter.Image {
 
     // Constructors of St-13.St.ImageContent
 
-    constructor(config?: ImageContent.ConstructorProperties) 
+    constructor(config?: ImageContent.ConstructorProperties)
     _init(config?: ImageContent.ConstructorProperties): void
     /**
      * Creates a new #StImageContent, a simple content for sized images.
-     * 
+     *
      * See #ClutterImage for setting the actual image to display or #StIcon for
      * displaying icons.
      * @param width The preferred width to be used when drawing the content
@@ -4764,7 +4771,7 @@ interface Label extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Contai
 /**
  * The contents of this structure is private and should only be accessed using
  * the provided API.
- * @class 
+ * @class
  */
 class Label extends Widget {
 
@@ -4775,17 +4782,17 @@ class Label extends Widget {
 
     // Constructors of St-13.St.Label
 
-    constructor(config?: Label.ConstructorProperties) 
+    constructor(config?: Label.ConstructorProperties)
     /**
      * Create a new #StLabel with the label specified by `text`.
-     * @constructor 
+     * @constructor
      * @param text text to set the label to
      * @returns a new #StLabel
      */
-    constructor(text: string | null) 
+    constructor(text: string | null)
     /**
      * Create a new #StLabel with the label specified by `text`.
-     * @constructor 
+     * @constructor
      * @param text text to set the label to
      * @returns a new #StLabel
      */
@@ -4795,10 +4802,10 @@ class Label extends Widget {
 
     /**
      * Creates a new #ClutterActor.
-     * 
+     *
      * A newly created actor has a floating reference, which will be sunk
      * when it is added to another actor.
-     * @constructor 
+     * @constructor
      * @returns the newly created #ClutterActor
      */
     static new(): Clutter.Actor
@@ -5174,16 +5181,16 @@ class PasswordEntry extends Entry {
 
     // Constructors of St-13.St.PasswordEntry
 
-    constructor(config?: PasswordEntry.ConstructorProperties) 
+    constructor(config?: PasswordEntry.ConstructorProperties)
     /**
      * Create a new #StPasswordEntry.
-     * @constructor 
+     * @constructor
      * @returns a new #StEntry
      */
-    constructor() 
+    constructor()
     /**
      * Create a new #StPasswordEntry.
-     * @constructor 
+     * @constructor
      * @returns a new #StEntry
      */
     static new(): PasswordEntry
@@ -5192,17 +5199,17 @@ class PasswordEntry extends Entry {
 
     /**
      * Create a new #StEntry with the specified text.
-     * @constructor 
+     * @constructor
      * @param text text to set the entry to
      * @returns a new #StEntry
      */
     static new(text: string | null): Entry
     /**
      * Creates a new #ClutterActor.
-     * 
+     *
      * A newly created actor has a floating reference, which will be sunk
      * when it is added to another actor.
-     * @constructor 
+     * @constructor
      * @returns the newly created #ClutterActor
      */
     static new(): Clutter.Actor
@@ -5549,18 +5556,18 @@ class ScrollBar extends Widget {
 
     // Constructors of St-13.St.ScrollBar
 
-    constructor(config?: ScrollBar.ConstructorProperties) 
-    constructor(adjustment: Adjustment) 
+    constructor(config?: ScrollBar.ConstructorProperties)
+    constructor(adjustment: Adjustment)
     static new(adjustment: Adjustment): ScrollBar
 
     // Overloads of new
 
     /**
      * Creates a new #ClutterActor.
-     * 
+     *
      * A newly created actor has a floating reference, which will be sunk
      * when it is added to another actor.
-     * @constructor 
+     * @constructor
      * @returns the newly created #ClutterActor
      */
     static new(): Clutter.Actor
@@ -6019,7 +6026,7 @@ interface ScrollView extends Atk.ImplementorIface, Clutter.Animatable, Clutter.C
 /**
  * The contents of this structure are private and should only be accessed
  * through the public API.
- * @class 
+ * @class
  */
 class ScrollView extends Bin {
 
@@ -6030,16 +6037,16 @@ class ScrollView extends Bin {
 
     // Constructors of St-13.St.ScrollView
 
-    constructor(config?: ScrollView.ConstructorProperties) 
+    constructor(config?: ScrollView.ConstructorProperties)
     /**
      * Create a new #StScrollView.
-     * @constructor 
+     * @constructor
      * @returns a new #StScrollView
      */
-    constructor() 
+    constructor()
     /**
      * Create a new #StScrollView.
-     * @constructor 
+     * @constructor
      * @returns a new #StScrollView
      */
     static new(): ScrollView
@@ -6048,16 +6055,16 @@ class ScrollView extends Bin {
 
     /**
      * Creates a new #StBin, a simple container for one child.
-     * @constructor 
+     * @constructor
      * @returns the newly created #StBin actor
      */
     static new(): Bin
     /**
      * Creates a new #ClutterActor.
-     * 
+     *
      * A newly created actor has a floating reference, which will be sunk
      * when it is added to another actor.
-     * @constructor 
+     * @constructor
      * @returns the newly created #ClutterActor
      */
     static new(): Clutter.Actor
@@ -6167,16 +6174,16 @@ class ScrollViewFade extends Clutter.ShaderEffect {
 
     // Constructors of St-13.St.ScrollViewFade
 
-    constructor(config?: ScrollViewFade.ConstructorProperties) 
+    constructor(config?: ScrollViewFade.ConstructorProperties)
     /**
      * Create a new #StScrollViewFade.
-     * @constructor 
+     * @constructor
      * @returns a new #StScrollViewFade
      */
-    constructor() 
+    constructor()
     /**
      * Create a new #StScrollViewFade.
-     * @constructor 
+     * @constructor
      * @returns a new #StScrollViewFade
      */
     static new(): ScrollViewFade
@@ -6186,10 +6193,10 @@ class ScrollViewFade extends Clutter.ShaderEffect {
     /**
      * Creates a new #ClutterShaderEffect, to be applied to an actor using
      * [method`Actor`.add_effect].
-     * 
+     *
      * The effect will be empty until [method`ShaderEffect`.set_shader_source]
      * is called.
-     * @constructor 
+     * @constructor
      * @param shader_type the type of the shader, either %CLUTTER_FRAGMENT_SHADER,   or %CLUTTER_VERTEX_SHADER
      * @returns the newly created #ClutterShaderEffect.   Use g_object_unref() when done.
      */
@@ -6356,7 +6363,7 @@ class Settings extends GObject.Object {
 
     // Constructors of St-13.St.Settings
 
-    constructor(config?: Settings.ConstructorProperties) 
+    constructor(config?: Settings.ConstructorProperties)
     _init(config?: Settings.ConstructorProperties): void
     /**
      * Gets the global #StSettings object.
@@ -6404,7 +6411,7 @@ interface TextureCache {
      * Create a #GIcon which tracks the #cairo_surface_t value of a GObject property
      * named by `property_name`.  Unlike other methods in StTextureCache, the underlying
      * #CoglTexture is not shared by default with other invocations to this method.
-     * 
+     *
      * If the source object is destroyed, the texture will continue to show the last
      * value of the property.
      * @param object A #GObject with a property `property_name` of type #cairo_surface_t
@@ -6461,7 +6468,7 @@ interface TextureCache {
      * @param grid_width Width in pixels
      * @param grid_height Height in pixels
      * @param paint_scale Scale factor of the display
-     * @param resource_scale 
+     * @param resource_scale
      * @param load_callback Function called when the image is loaded, or %NULL
      * @returns A new #ClutterActor
      */
@@ -6498,7 +6505,7 @@ class TextureCache extends GObject.Object {
 
     // Constructors of St-13.St.TextureCache
 
-    constructor(config?: TextureCache.ConstructorProperties) 
+    constructor(config?: TextureCache.ConstructorProperties)
     _init(config?: TextureCache.ConstructorProperties): void
     static get_default(): TextureCache
 }
@@ -6642,8 +6649,8 @@ class Theme extends GObject.Object {
 
     // Constructors of St-13.St.Theme
 
-    constructor(config?: Theme.ConstructorProperties) 
-    constructor(application_stylesheet: Gio.File, theme_stylesheet: Gio.File, default_stylesheet: Gio.File) 
+    constructor(config?: Theme.ConstructorProperties)
+    constructor(application_stylesheet: Gio.File, theme_stylesheet: Gio.File, default_stylesheet: Gio.File)
     static new(application_stylesheet: Gio.File, theme_stylesheet: Gio.File, default_stylesheet: Gio.File): Theme
     _init(config?: Theme.ConstructorProperties): void
 }
@@ -6765,22 +6772,22 @@ class ThemeContext extends GObject.Object {
 
     // Constructors of St-13.St.ThemeContext
 
-    constructor(config?: ThemeContext.ConstructorProperties) 
+    constructor(config?: ThemeContext.ConstructorProperties)
     /**
      * Create a new theme context not associated with any #ClutterStage.
      * This can be useful in testing scenarios, or if using StThemeContext
      * with something other than #ClutterActor objects, but you generally
      * should use st_theme_context_get_for_stage() instead.
-     * @constructor 
+     * @constructor
      * @returns a new #StThemeContext
      */
-    constructor() 
+    constructor()
     /**
      * Create a new theme context not associated with any #ClutterStage.
      * This can be useful in testing scenarios, or if using StThemeContext
      * with something other than #ClutterActor objects, but you generally
      * should use st_theme_context_get_for_stage() instead.
-     * @constructor 
+     * @constructor
      * @returns a new #StThemeContext
      */
     static new(): ThemeContext
@@ -6849,9 +6856,9 @@ interface ThemeNode {
      * the same CSS rules and have the same style properties. However, two
      * nodes that have ended up with identical style properties do not
      * necessarily compare equal.
-     * 
+     *
      * In detail, `node_a` and `node_b` are considered equal if and only if:
-     * 
+     *
      * - they share the same #StTheme and #StThemeContext
      * - they have the same parent
      * - they have the same element type
@@ -6920,10 +6927,10 @@ interface ThemeNode {
      * specific getters (like st_theme_node_get_background_color()) exist, they
      * should be used instead. They are cached, so more efficient, and have
      * handling for shortcut properties and other details of CSS.
-     * 
+     *
      * If `property_name` is not found, a warning will be logged and a
      * default color returned.
-     * 
+     *
      * See also st_theme_node_lookup_color(), which provides more options,
      * and lets you handle the case where the theme does not specify the
      * indicated color.
@@ -6941,7 +6948,7 @@ interface ThemeNode {
     /**
      * Generically looks up a property containing a single numeric value
      *  without units.
-     * 
+     *
      * See also st_theme_node_lookup_double(), which provides more options,
      * and lets you handle the case where the theme does not specify the
      * indicated value.
@@ -7005,11 +7012,11 @@ interface ThemeNode {
      * specific getters (like st_theme_node_get_border_width()) exist, they
      * should be used instead. They are cached, so more efficient, and have
      * handling for shortcut properties and other details of CSS.
-     * 
+     *
      * Unlike st_theme_node_get_color() and st_theme_node_get_double(),
      * this does not print a warning if the property is not found; it just
      * returns 0.
-     * 
+     *
      * See also st_theme_node_lookup_length(), which provides more options. The
      * returned value is in physical pixels, as opposed to logical pixels.
      * @param property_name The name of the length property
@@ -7087,10 +7094,10 @@ interface ThemeNode {
      * specific getters (like st_theme_node_get_box_shadow()) exist, they
      * should be used instead. They are cached, so more efficient, and have
      * handling for shortcut properties and other details of CSS.
-     * 
+     *
      * Like st_theme_get_length(), this does not print a warning if the property is
      * not found; it just returns %NULL
-     * 
+     *
      * See also st_theme_node_lookup_shadow (), which provides more options.
      * @param property_name The name of the shadow property
      * @returns the shadow, or %NULL if the property was   not found.
@@ -7125,7 +7132,7 @@ interface ThemeNode {
     get_transition_duration(): number
     /**
      * Looks up a property containing a single URL value.
-     * 
+     *
      * See also st_theme_node_lookup_url(), which provides more options,
      * and lets you handle the case where the theme does not specify the
      * indicated value.
@@ -7155,7 +7162,7 @@ interface ThemeNode {
      * specific getters (like st_theme_node_get_background_color()) exist, they
      * should be used instead. They are cached, so more efficient, and have
      * handling for shortcut properties and other details of CSS.
-     * 
+     *
      * See also st_theme_node_get_color(), which provides a simpler API.
      * @param property_name The name of the color property
      * @param inherit if %TRUE, if a value is not found for the property on the   node, then it will be looked up on the parent node, and then on the   parent's parent, and so forth. Note that if the property has a   value of 'inherit' it will be inherited even if %FALSE is passed   in for `inherit;` this only affects the default behavior for inheritance.
@@ -7165,7 +7172,7 @@ interface ThemeNode {
     /**
      * Generically looks up a property containing a single numeric value
      *  without units.
-     * 
+     *
      * See also st_theme_node_get_double(), which provides a simpler API.
      * @param property_name The name of the numeric property
      * @param inherit if %TRUE, if a value is not found for the property on the   node, then it will be looked up on the parent node, and then on the   parent's parent, and so forth. Note that if the property has a   value of 'inherit' it will be inherited even if %FALSE is passed   in for `inherit;` this only affects the default behavior for inheritance.
@@ -7177,7 +7184,7 @@ interface ThemeNode {
      * specific getters (like st_theme_node_get_border_width()) exist, they
      * should be used instead. They are cached, so more efficient, and have
      * handling for shortcut properties and other details of CSS.
-     * 
+     *
      * See also st_theme_node_get_length(), which provides a simpler API.
      * @param property_name The name of the length property
      * @param inherit if %TRUE, if a value is not found for the property on the   node, then it will be looked up on the parent node, and then on the   parent's parent, and so forth. Note that if the property has a   value of 'inherit' it will be inherited even if %FALSE is passed   in for `inherit;` this only affects the default behavior for inheritance.
@@ -7187,12 +7194,12 @@ interface ThemeNode {
     /**
      * If the property is not found, the value in the shadow variable will not
      * be changed.
-     * 
+     *
      * Generically looks up a property containing a set of shadow values. When
      * specific getters (like st_theme_node_get_box_shadow ()) exist, they
      * should be used instead. They are cached, so more efficient, and have
      * handling for shortcut properties and other details of CSS.
-     * 
+     *
      * See also st_theme_node_get_shadow(), which provides a simpler API.
      * @param property_name The name of the shadow property
      * @param inherit if %TRUE, if a value is not found for the property on the   node, then it will be looked up on the parent node, and then on the   parent's parent, and so forth. Note that if the property has a   value of 'inherit' it will be inherited even if %FALSE is passed   in for `inherit;` this only affects the default behavior for inheritance.
@@ -7209,7 +7216,7 @@ interface ThemeNode {
     lookup_time(property_name: string, inherit: boolean): [ /* returnType */ boolean, /* value */ number ]
     /**
      * Looks up a property containing a single URL value.
-     * 
+     *
      * See also st_theme_node_get_url(), which provides a simpler API.
      * @param property_name The name of the string property
      * @param inherit if %TRUE, if a value is not found for the property on the   node, then it will be looked up on the parent node, and then on the   parent's parent, and so forth. Note that if the property has a   value of 'inherit' it will be inherited even if %FALSE is passed   in for `inherit;` this only affects the default behavior for inheritance.
@@ -7248,12 +7255,12 @@ class ThemeNode extends GObject.Object {
 
     // Constructors of St-13.St.ThemeNode
 
-    constructor(config?: ThemeNode.ConstructorProperties) 
+    constructor(config?: ThemeNode.ConstructorProperties)
     /**
      * Creates a new #StThemeNode. Once created, a node is immutable. If any
      * of the attributes of the node (like the `element_class)` change the node
      * and its child nodes must be destroyed and recreated.
-     * @constructor 
+     * @constructor
      * @param context the context representing global state for this themed tree
      * @param parent_node the parent node of this node
      * @param theme a theme (stylesheet set) that overrides the   theme inherited from the parent node
@@ -7261,15 +7268,15 @@ class ThemeNode extends GObject.Object {
      * @param element_id the ID to match CSS rules against
      * @param element_class a whitespace-separated list of classes   to match CSS rules against
      * @param pseudo_class a whitespace-separated list of pseudo-classes   (like 'hover' or 'visited') to match CSS rules against
-     * @param inline_style 
+     * @param inline_style
      * @returns a new #StThemeNode
      */
-    constructor(context: ThemeContext, parent_node: ThemeNode | null, theme: Theme | null, element_type: GObject.GType, element_id: string | null, element_class: string | null, pseudo_class: string | null, inline_style: string) 
+    constructor(context: ThemeContext, parent_node: ThemeNode | null, theme: Theme | null, element_type: GObject.GType, element_id: string | null, element_class: string | null, pseudo_class: string | null, inline_style: string)
     /**
      * Creates a new #StThemeNode. Once created, a node is immutable. If any
      * of the attributes of the node (like the `element_class)` change the node
      * and its child nodes must be destroyed and recreated.
-     * @constructor 
+     * @constructor
      * @param context the context representing global state for this themed tree
      * @param parent_node the parent node of this node
      * @param theme a theme (stylesheet set) that overrides the   theme inherited from the parent node
@@ -7277,7 +7284,7 @@ class ThemeNode extends GObject.Object {
      * @param element_id the ID to match CSS rules against
      * @param element_class a whitespace-separated list of classes   to match CSS rules against
      * @param pseudo_class a whitespace-separated list of pseudo-classes   (like 'hover' or 'visited') to match CSS rules against
-     * @param inline_style 
+     * @param inline_style
      * @returns a new #StThemeNode
      */
     static new(context: ThemeContext, parent_node: ThemeNode | null, theme: Theme | null, element_type: GObject.GType, element_id: string | null, element_class: string | null, pseudo_class: string | null, inline_style: string): ThemeNode
@@ -7575,7 +7582,7 @@ class Viewport extends Widget {
 
     // Constructors of St-13.St.Viewport
 
-    constructor(config?: Viewport.ConstructorProperties) 
+    constructor(config?: Viewport.ConstructorProperties)
     _init(config?: Viewport.ConstructorProperties): void
 }
 
@@ -7778,7 +7785,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * `widget`. The list of states of a widget describes the current state
      * of user interface element `widget` and is provided so that assistive
      * technologies know how to present `widget` to the user.
-     * 
+     *
      * Usually you will have no need to add accessible states for an
      * object, as the accessible object can extract most of the states
      * from the object itself (ie: a #StButton knows when it is pressed).
@@ -7854,7 +7861,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
     get_style_class_name(): string
     /**
      * Get the current style pseudo class list.
-     * 
+     *
      * Note that an actor can have multiple pseudo classes; if you just
      * want to test for the presence of a specific pseudo class, use
      * st_widget_has_style_pseudo_class().
@@ -7865,7 +7872,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * Gets the theme node holding style information for the widget.
      * The theme node is used to access standard and custom CSS
      * properties of the widget.
-     * 
+     *
      * Note: it is a fatal error to call this on a widget that is
      *  not been added to a stage.
      * @returns the theme node for the widget.   This is owned by the widget. When attributes of the widget   or the environment that affect the styling change (for example   the style_class property of the widget), it will be recreated,   and the ::style-changed signal will be emitted on the widget.
@@ -7892,7 +7899,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
     /**
      * Tries to update the keyboard focus within `widget` in response to a
      * keyboard event.
-     * 
+     *
      * If `from` is a descendant of `widget,` this attempts to move the
      * keyboard focus to the next descendant of `widget` (in the order
      * implied by `direction)` that has the #StWidget:can-focus property
@@ -7901,16 +7908,16 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * `direction`. If `from` is outside of `widget,` it behaves as if it was
      * a descendant if `direction` is one of the directional arrows and as
      * if it was %NULL otherwise.
-     * 
+     *
      * If a container type is marked #StWidget:can-focus, the expected
      * behavior is that it will only take up a single slot on the focus
      * chain as a whole, rather than allowing navigation between its child
      * actors (or having a distinction between itself being focused and
      * one of its children being focused).
-     * 
+     *
      * Some widget classes might have slightly different behavior from the
      * above, where that would make more sense.
-     * 
+     *
      * If `wrap_around` is %TRUE and `from` is a child of `widget,` but the
      * widget has no further children that can accept the focus in the
      * given direction, then st_widget_navigate_focus() will try a second
@@ -7926,7 +7933,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * Paint the background of the widget. This is meant to be called by
      * subclasses of StWidget that need to paint the background without
      * painting children.
-     * @param paint_context 
+     * @param paint_context
      */
     paint_background(paint_context: Clutter.PaintContext): void
     /**
@@ -7962,12 +7969,12 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * This method allows to set a customly created accessible object to
      * this widget. For example if you define a new subclass of
      * #StWidgetAccessible at the javascript code.
-     * 
+     *
      * NULL is a valid value for `accessible`. That contemplates the
      * hypothetical case of not needing anymore a custom accessible object
      * for the widget. Next call of st_widget_get_accessible() would
      * create and return a default accessible.
-     * 
+     *
      * It assumes that the call to atk_object_initialize that bound the
      * gobject with the custom accessible object was already called, so
      * not a responsibility of this method.
@@ -7976,7 +7983,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
     set_accessible(accessible: Atk.Object): void
     /**
      * This method sets `name` as the accessible name for `widget`.
-     * 
+     *
      * Usually you will have no need to set the accessible name for an
      * object, as usually there is a label for most of the interface
      * elements. So in general it is better to just use
@@ -7991,7 +7998,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * role describes what kind of user interface element `widget` is and
      * is provided so that assistive technologies know how to present
      * `widget` to the user.
-     * 
+     *
      * Usually you will have no need to set the accessible role for an
      * object, as this information is extracted from the context of the
      * object (ie: a #StButton has by default a push button role). This
@@ -8000,7 +8007,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * used in an unusual way (ie: a #StButton used as a togglebutton), or
      * if a generic object is used directly (ie: a container as a menu
      * item).
-     * 
+     *
      * If `role` is #ATK_ROLE_INVALID, the role will not be changed
      * and the accessible's default role will be used instead.
      * @param role The role to use
@@ -8015,7 +8022,7 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
     /**
      * Sets `widget'`s hover property and adds or removes "hover" from its
      * pseudo class accordingly.
-     * 
+     *
      * If you have set #StWidget:track-hover, you should not need to call
      * this directly. You can call st_widget_sync_hover() if the hover
      * state might be out of sync due to another actor's pointer grab.
@@ -8054,13 +8061,13 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
     set_style_pseudo_class(pseudo_class_list: string | null): void
     /**
      * Enables hover tracking on the #StWidget.
-     * 
+     *
      * If hover tracking is enabled, and the widget is visible and
      * reactive, then `widget'`s #StWidget:hover property will be updated
      * automatically to reflect whether the pointer is in `widget` (or one
      * of its children), and `widget'`s #StWidget:pseudo-class will have
      * the "hover" class added and removed from it accordingly.
-     * 
+     *
      * Note that currently it is not possible to correctly track the hover
      * state when another actor has a pointer grab. You can use
      * st_widget_sync_hover() to update the property manually in this
@@ -8082,14 +8089,14 @@ interface Widget extends Atk.ImplementorIface, Clutter.Animatable, Clutter.Conta
      * Gets a list of the focusable children of `widget,` in "Tab"
      * order. By default, this returns all visible
      * (as in clutter_actor_is_visible()) children of `widget`.
-     * @virtual 
+     * @virtual
      * @returns    @widget's focusable children
      */
     vfunc_get_focus_chain(): Clutter.Actor[]
     vfunc_navigate_focus(from: Clutter.Actor | null, direction: DirectionType): boolean
     /**
      * Asks the widget to pop-up a context menu by emitting #StWidget::popup-menu.
-     * @virtual 
+     * @virtual
      */
     vfunc_popup_menu(): void
     vfunc_style_changed(): void
@@ -8360,7 +8367,7 @@ class Widget extends Clutter.Actor {
 
     // Constructors of St-13.St.Widget
 
-    constructor(config?: Widget.ConstructorProperties) 
+    constructor(config?: Widget.ConstructorProperties)
     _init(config?: Widget.ConstructorProperties): void
 }
 
@@ -8402,7 +8409,7 @@ interface WidgetAccessible extends Atk.Action, Atk.Component {
      * "click", "press", "release", "drag", "drop", "popup", etc.
      * The "popup" action should be used to pop up a context menu for the
      * object, if one exists.
-     * 
+     *
      * For technical reasons, some toolkits cannot guarantee that the
      * reported action is actually 'bound' to a nontrivial user event;
      * i.e. the result of some actions via atk_action_do_action() may be
@@ -8433,14 +8440,14 @@ interface WidgetAccessible extends Atk.Action, Atk.Component {
     set_description(description: string): void
     /**
      * Returns a description of the specified action of the object.
-     * @virtual 
+     * @virtual
      * @param i the action index corresponding to the action to be performed
      * @returns a description string, or %NULL if @action does not implement this interface.
      */
     vfunc_get_description(i: number): string | null
     /**
      * Gets the accessible description of the accessible.
-     * @virtual 
+     * @virtual
      * @returns a character string representing the accessible description of the accessible.
      */
     vfunc_get_description(): string
@@ -8454,25 +8461,25 @@ interface WidgetAccessible extends Atk.Action, Atk.Component {
      * "click", "press", "release", "drag", "drop", "popup", etc.
      * The "popup" action should be used to pop up a context menu for the
      * object, if one exists.
-     * 
+     *
      * For technical reasons, some toolkits cannot guarantee that the
      * reported action is actually 'bound' to a nontrivial user event;
      * i.e. the result of some actions via atk_action_do_action() may be
      * NIL.
-     * @virtual 
+     * @virtual
      * @param i the action index corresponding to the action to be performed
      * @returns a name string, or %NULL if @action does not implement this interface.
      */
     vfunc_get_name(i: number): string | null
     /**
      * Gets the accessible name of the accessible.
-     * @virtual 
+     * @virtual
      * @returns a character string representing the accessible name of the object.
      */
     vfunc_get_name(): string
     /**
      * Sets a description of the specified action of the object.
-     * @virtual 
+     * @virtual
      * @param i the action index corresponding to the action to be performed
      * @param desc the description to be assigned to this action
      * @returns a gboolean representing if the description was successfully set;
@@ -8483,7 +8490,7 @@ interface WidgetAccessible extends Atk.Action, Atk.Component {
      * the description to NULL. This is reserved for the initial value. In
      * this aspect NULL is similar to ATK_ROLE_UNKNOWN. If you want to set
      * the name to a empty value you can use "".
-     * @virtual 
+     * @virtual
      * @param description a character string to be set as the accessible description
      */
     vfunc_set_description(description: string): void
@@ -8550,7 +8557,7 @@ class WidgetAccessible extends Cally.Actor {
 
     // Constructors of St-13.St.WidgetAccessible
 
-    constructor(config?: WidgetAccessible.ConstructorProperties) 
+    constructor(config?: WidgetAccessible.ConstructorProperties)
     _init(config?: WidgetAccessible.ConstructorProperties): void
 }
 
@@ -8563,7 +8570,7 @@ interface AdjustmentClass {
 
 /**
  * Base class for #StAdjustment.
- * @record 
+ * @record
  */
 abstract class AdjustmentClass {
 
@@ -8577,7 +8584,7 @@ interface BinClass {
 
 /**
  * The #StBinClass struct contains only private data
- * @record 
+ * @record
  */
 abstract class BinClass {
 
@@ -8753,22 +8760,22 @@ interface IconColors {
 
     /**
      * foreground color
-     * @field 
+     * @field
      */
     foreground: Clutter.Color
     /**
      * color indicating a warning state
-     * @field 
+     * @field
      */
     warning: Clutter.Color
     /**
      * color indicating an error state
-     * @field 
+     * @field
      */
     error: Clutter.Color
     /**
      * color indicating a successful operation
-     * @field 
+     * @field
      */
     success: Clutter.Color
 
@@ -8803,7 +8810,7 @@ interface IconColors {
 /**
  * The #StIconColors structure encapsulates colors for colorizing a symbolic
  * icon.
- * @record 
+ * @record
  */
 class IconColors {
 
@@ -8815,13 +8822,13 @@ class IconColors {
 
     /**
      * Creates a new #StIconColors. All colors are initialized to transparent black.
-     * @constructor 
+     * @constructor
      * @returns a newly created #StIconColors. Free with st_icon_colors_unref()
      */
-    constructor() 
+    constructor()
     /**
      * Creates a new #StIconColors. All colors are initialized to transparent black.
-     * @constructor 
+     * @constructor
      * @returns a newly created #StIconColors. Free with st_icon_colors_unref()
      */
     static new(): IconColors
@@ -9007,30 +9014,30 @@ interface Shadow {
 
     /**
      * shadow's color
-     * @field 
+     * @field
      */
     color: Clutter.Color
     /**
      * horizontal offset - positive values mean placement to the right,
      *           negative values placement to the left of the element.
-     * @field 
+     * @field
      */
     xoffset: number
     /**
      * vertical offset - positive values mean placement below, negative
      *           values placement above the element.
-     * @field 
+     * @field
      */
     yoffset: number
     /**
      * shadow's blur radius - a value of 0.0 will result in a hard shadow.
-     * @field 
+     * @field
      */
     blur: number
     /**
      * shadow's spread radius - grow the shadow without enlarging the
      *           blur.
-     * @field 
+     * @field
      */
     spread: number
     inset: boolean
@@ -9067,7 +9074,7 @@ interface Shadow {
 
 /**
  * Attributes of the -st-shadow property.
- * @record 
+ * @record
  */
 class Shadow {
 
@@ -9079,7 +9086,7 @@ class Shadow {
 
     /**
      * Creates a new #StShadow
-     * @constructor 
+     * @constructor
      * @param color shadow's color
      * @param xoffset horizontal offset
      * @param yoffset vertical offset
@@ -9088,10 +9095,10 @@ class Shadow {
      * @param inset whether the shadow should be inset
      * @returns the newly allocated shadow. Use st_shadow_free() when done
      */
-    constructor(color: Clutter.Color, xoffset: number, yoffset: number, blur: number, spread: number, inset: boolean) 
+    constructor(color: Clutter.Color, xoffset: number, yoffset: number, blur: number, spread: number, inset: boolean)
     /**
      * Creates a new #StShadow
-     * @constructor 
+     * @constructor
      * @param color shadow's color
      * @param xoffset horizontal offset
      * @param yoffset vertical offset
@@ -9138,15 +9145,15 @@ class ShadowHelper {
     /**
      * Builds a #StShadowHelper that will build a drop shadow
      * using `source` as the mask.
-     * @constructor 
+     * @constructor
      * @param shadow a #StShadow representing the shadow properties
      * @returns a new #StShadowHelper
      */
-    constructor(shadow: Shadow) 
+    constructor(shadow: Shadow)
     /**
      * Builds a #StShadowHelper that will build a drop shadow
      * using `source` as the mask.
-     * @constructor 
+     * @constructor
      * @param shadow a #StShadow representing the shadow properties
      * @returns a new #StShadowHelper
      */
@@ -9302,7 +9309,7 @@ interface WidgetClass {
 
 /**
  * Base class for stylable actors.
- * @record 
+ * @record
  */
 abstract class WidgetClass {
 
